
Radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e82  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000911  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000738  00000000  00000000  0000204b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  000029f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000913  00000000  00000000  00002ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000037d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  9e:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_transmit>:
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	6b 01       	movw	r12, r22
 12c:	8a 01       	movw	r16, r20
 12e:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 132:	f8 2e       	mov	r15, r24
 134:	81 11       	cpse	r24, r1
 136:	12 c0       	rjmp	.+36     	; 0x15c <i2c_transmit+0x40>
 138:	01 15       	cp	r16, r1
 13a:	11 05       	cpc	r17, r1
 13c:	59 f0       	breq	.+22     	; 0x154 <i2c_transmit+0x38>
 13e:	e6 01       	movw	r28, r12
 140:	0c 0d       	add	r16, r12
 142:	1d 1d       	adc	r17, r13
 144:	89 91       	ld	r24, Y+
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 14a:	81 11       	cpse	r24, r1
 14c:	0a c0       	rjmp	.+20     	; 0x162 <i2c_transmit+0x46>
 14e:	c0 17       	cp	r28, r16
 150:	d1 07       	cpc	r29, r17
 152:	c1 f7       	brne	.-16     	; 0x144 <i2c_transmit+0x28>
 154:	84 e9       	ldi	r24, 0x94	; 148
 156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 15a:	05 c0       	rjmp	.+10     	; 0x166 <i2c_transmit+0x4a>
 15c:	ff 24       	eor	r15, r15
 15e:	f3 94       	inc	r15
 160:	02 c0       	rjmp	.+4      	; 0x166 <i2c_transmit+0x4a>
 162:	ff 24       	eor	r15, r15
 164:	f3 94       	inc	r15
 166:	8f 2d       	mov	r24, r15
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 178:	84 e9       	ldi	r24, 0x94	; 148
 17a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 17e:	08 95       	ret

00000180 <writeToTEA5767>:

//Last 8 bits that you translated in byteOne
unsigned char byteTwo (unsigned int x) {
	unsigned char c = 0xFF;
	return x & c;
}
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 186:	45 e0       	ldi	r20, 0x05	; 5
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	66 e0       	ldi	r22, 0x06	; 6
 18c:	71 e0       	ldi	r23, 0x01	; 1
 18e:	80 ec       	ldi	r24, 0xC0	; 192
 190:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_transmit>
 194:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_stop>
 198:	08 95       	ret

0000019a <calcPLL>:
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	34 e2       	ldi	r19, 0x24	; 36
 19e:	44 e7       	ldi	r20, 0x74	; 116
 1a0:	59 e4       	ldi	r21, 0x49	; 73
 1a2:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	3a eb       	ldi	r19, 0xBA	; 186
 1aa:	4b e5       	ldi	r20, 0x5B	; 91
 1ac:	58 e4       	ldi	r21, 0x48	; 72
 1ae:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__addsf3>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e8       	ldi	r20, 0x80	; 128
 1b8:	50 e4       	ldi	r21, 0x40	; 64
 1ba:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	58 e3       	ldi	r21, 0x38	; 56
 1c6:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3>
 1ca:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fixunssfsi>
 1ce:	cb 01       	movw	r24, r22
 1d0:	08 95       	ret

000001d2 <changeFrequency>:

void changeFrequency () {
	bytes[0] = byteOne(calcPLL(frequency));
 1d2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <frequency>
 1d6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <frequency+0x1>
 1da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frequency+0x2>
 1de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frequency+0x3>
 1e2:	0e 94 cd 00 	call	0x19a	; 0x19a <calcPLL>
 1e6:	e6 e0       	ldi	r30, 0x06	; 6
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
	return base;
}

//Translate 8 bits over to get first 6 bits
unsigned char byteOne (unsigned int x) {
	return (x >> 8);
 1ea:	90 83       	st	Z, r25
}

//Last 8 bits that you translated in byteOne
unsigned char byteTwo (unsigned int x) {
	unsigned char c = 0xFF;
	return x & c;
 1ec:	81 83       	std	Z+1, r24	; 0x01
}

void changeFrequency () {
	bytes[0] = byteOne(calcPLL(frequency));
	bytes[1] = byteTwo(calcPLL(frequency));
	writeToTEA5767();
 1ee:	0e 94 c0 00 	call	0x180	; 0x180 <writeToTEA5767>
 1f2:	08 95       	ret

000001f4 <muteRadio>:
}

void muteRadio () {
	if(mute) {
 1f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1fc:	89 2b       	or	r24, r25
 1fe:	51 f0       	breq	.+20     	; 0x214 <muteRadio+0x20>
		bytes[0] = bytes[0] | 0x80;
 200:	e6 e0       	ldi	r30, 0x06	; 6
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	80 81       	ld	r24, Z
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
		mute = 0;
 20a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 20e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 212:	12 c0       	rjmp	.+36     	; 0x238 <muteRadio+0x44>
	}
	else {
		bytes[0] = byteOne(calcPLL(frequency));
 214:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <frequency>
 218:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <frequency+0x1>
 21c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frequency+0x2>
 220:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frequency+0x3>
 224:	0e 94 cd 00 	call	0x19a	; 0x19a <calcPLL>
	return base;
}

//Translate 8 bits over to get first 6 bits
unsigned char byteOne (unsigned int x) {
	return (x >> 8);
 228:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
		bytes[0] = bytes[0] | 0x80;
		mute = 0;
	}
	else {
		bytes[0] = byteOne(calcPLL(frequency));
		mute = 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	writeToTEA5767();
 238:	0e 94 c0 00 	call	0x180	; 0x180 <writeToTEA5767>
 23c:	08 95       	ret

0000023e <__vector_5>:
}

ISR(PCINT2_vect) {
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	if(bit_is_clear(BUTTON_PIN, BUTTON)) {
 268:	4a 99       	sbic	0x09, 2	; 9
 26a:	2f c0       	rjmp	.+94     	; 0x2ca <__vector_5+0x8c>
		frequency -= 0.2;
 26c:	2d ec       	ldi	r18, 0xCD	; 205
 26e:	3c ec       	ldi	r19, 0xCC	; 204
 270:	4c e4       	ldi	r20, 0x4C	; 76
 272:	5e e3       	ldi	r21, 0x3E	; 62
 274:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <frequency>
 278:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <frequency+0x1>
 27c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frequency+0x2>
 280:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frequency+0x3>
 284:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__subsf3>
 288:	6b 01       	movw	r12, r22
 28a:	7c 01       	movw	r14, r24
		if(frequency < 88.3) {
 28c:	2a e9       	ldi	r18, 0x9A	; 154
 28e:	39 e9       	ldi	r19, 0x99	; 153
 290:	40 eb       	ldi	r20, 0xB0	; 176
 292:	52 e4       	ldi	r21, 0x42	; 66
 294:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__cmpsf2>
 298:	88 23       	and	r24, r24
 29a:	4c f0       	brlt	.+18     	; 0x2ae <__vector_5+0x70>
	writeToTEA5767();
}

ISR(PCINT2_vect) {
	if(bit_is_clear(BUTTON_PIN, BUTTON)) {
		frequency -= 0.2;
 29c:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <frequency>
 2a0:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <frequency+0x1>
 2a4:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <frequency+0x2>
 2a8:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <frequency+0x3>
 2ac:	0c c0       	rjmp	.+24     	; 0x2c6 <__vector_5+0x88>
		if(frequency < 88.3) {
			frequency = 88.3;
 2ae:	8a e9       	ldi	r24, 0x9A	; 154
 2b0:	99 e9       	ldi	r25, 0x99	; 153
 2b2:	a0 eb       	ldi	r26, 0xB0	; 176
 2b4:	b2 e4       	ldi	r27, 0x42	; 66
 2b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <frequency>
 2ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <frequency+0x1>
 2be:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <frequency+0x2>
 2c2:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <frequency+0x3>
		}
		changeFrequency();
 2c6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <changeFrequency>
	}

	if(bit_is_clear(BUTTON_PIN, BUTTON2)) {
 2ca:	4b 99       	sbic	0x09, 3	; 9
 2cc:	2f c0       	rjmp	.+94     	; 0x32c <__vector_5+0xee>
		frequency += 0.2;
 2ce:	2d ec       	ldi	r18, 0xCD	; 205
 2d0:	3c ec       	ldi	r19, 0xCC	; 204
 2d2:	4c e4       	ldi	r20, 0x4C	; 76
 2d4:	5e e3       	ldi	r21, 0x3E	; 62
 2d6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <frequency>
 2da:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <frequency+0x1>
 2de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frequency+0x2>
 2e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frequency+0x3>
 2e6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__addsf3>
 2ea:	6b 01       	movw	r12, r22
 2ec:	7c 01       	movw	r14, r24
		if(frequency > 107.9) {
 2ee:	2d ec       	ldi	r18, 0xCD	; 205
 2f0:	3c ec       	ldi	r19, 0xCC	; 204
 2f2:	47 ed       	ldi	r20, 0xD7	; 215
 2f4:	52 e4       	ldi	r21, 0x42	; 66
 2f6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__gesf2>
 2fa:	18 16       	cp	r1, r24
 2fc:	4c f0       	brlt	.+18     	; 0x310 <__vector_5+0xd2>
		}
		changeFrequency();
	}

	if(bit_is_clear(BUTTON_PIN, BUTTON2)) {
		frequency += 0.2;
 2fe:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <frequency>
 302:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <frequency+0x1>
 306:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <frequency+0x2>
 30a:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <frequency+0x3>
 30e:	0c c0       	rjmp	.+24     	; 0x328 <__vector_5+0xea>
		if(frequency > 107.9) {
			frequency = 107.9;
 310:	8d ec       	ldi	r24, 0xCD	; 205
 312:	9c ec       	ldi	r25, 0xCC	; 204
 314:	a7 ed       	ldi	r26, 0xD7	; 215
 316:	b2 e4       	ldi	r27, 0x42	; 66
 318:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <frequency>
 31c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <frequency+0x1>
 320:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <frequency+0x2>
 324:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <frequency+0x3>
		}
		changeFrequency();
 328:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <changeFrequency>
		
	}

	if(bit_is_clear(BUTTON_PIN, PD1)) {
 32c:	49 9b       	sbis	0x09, 1	; 9
		muteRadio();
 32e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <muteRadio>
	}

	toggleBit(LED_PORT, PB0);
 332:	95 b1       	in	r25, 0x05	; 5
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	89 27       	eor	r24, r25
 338:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	8f e4       	ldi	r24, 0x4F	; 79
 33c:	93 ec       	ldi	r25, 0xC3	; 195
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <__vector_5+0x100>
 342:	00 c0       	rjmp	.+0      	; 0x344 <__vector_5+0x106>
 344:	00 00       	nop
	_delay_ms(200);
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	7f 91       	pop	r23
 354:	6f 91       	pop	r22
 356:	5f 91       	pop	r21
 358:	4f 91       	pop	r20
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <setPullups>:

void setPullups(void) {
	BUTTON_PORT |= (1 << BUTTON);
 370:	5a 9a       	sbi	0x0b, 2	; 11
	BUTTON_PORT |= (1 << BUTTON2);
 372:	5b 9a       	sbi	0x0b, 3	; 11
	BUTTON_PORT |= (1 << PD1);
 374:	59 9a       	sbi	0x0b, 1	; 11
 376:	08 95       	ret

00000378 <initInterrupt>:
}

void initInterrupt(void) {
	PCICR |= (1 << PCIE2);
 378:	e8 e6       	ldi	r30, 0x68	; 104
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	80 83       	st	Z, r24
	PCMSK2 |= ( (1 << BUTTON) | (1 << BUTTON2) | ( 1 << PD1) );
 382:	ed e6       	ldi	r30, 0x6D	; 109
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	8e 60       	ori	r24, 0x0E	; 14
 38a:	80 83       	st	Z, r24
	sei();
 38c:	78 94       	sei
 38e:	08 95       	ret

00000390 <main>:
}
// -------------- MAIN --------------------------------//

int main(void) {

	bytes[0] = byteOne(calcPLL(frequency)); //0b00101111;
 390:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <frequency>
 394:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <frequency+0x1>
 398:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <frequency+0x2>
 39c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <frequency+0x3>
 3a0:	0e 94 cd 00 	call	0x19a	; 0x19a <calcPLL>
 3a4:	e6 e0       	ldi	r30, 0x06	; 6
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
	return base;
}

//Translate 8 bits over to get first 6 bits
unsigned char byteOne (unsigned int x) {
	return (x >> 8);
 3a8:	90 83       	st	Z, r25
}

//Last 8 bits that you translated in byteOne
unsigned char byteTwo (unsigned int x) {
	unsigned char c = 0xFF;
	return x & c;
 3aa:	81 83       	std	Z+1, r24	; 0x01

int main(void) {

	bytes[0] = byteOne(calcPLL(frequency)); //0b00101111;
	bytes[1] = byteTwo(calcPLL(frequency)); //0b10111110;
	bytes[2] = 0xB2;
 3ac:	82 eb       	ldi	r24, 0xB2	; 178
 3ae:	82 83       	std	Z+2, r24	; 0x02
	bytes[3] = 0x10;
 3b0:	80 e1       	ldi	r24, 0x10	; 16
 3b2:	83 83       	std	Z+3, r24	; 0x03
	bytes[4] = 0X00;
 3b4:	14 82       	std	Z+4, r1	; 0x04

	i2c_init();
 3b6:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	changeFrequency();
 3ba:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <changeFrequency>
	muteRadio();
 3be:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <muteRadio>
	
	setPullups();
 3c2:	0e 94 b8 01 	call	0x370	; 0x370 <setPullups>
	initInterrupt(); 
 3c6:	0e 94 bc 01 	call	0x378	; 0x378 <initInterrupt>

	while(1) {
		
	}
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <main+0x3a>

000003cc <__subsf3>:
 3cc:	50 58       	subi	r21, 0x80	; 128

000003ce <__addsf3>:
 3ce:	bb 27       	eor	r27, r27
 3d0:	aa 27       	eor	r26, r26
 3d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__addsf3x>
 3d6:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_round>
 3da:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscA>
 3de:	38 f0       	brcs	.+14     	; 0x3ee <__addsf3+0x20>
 3e0:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscB>
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__addsf3+0x20>
 3e6:	39 f4       	brne	.+14     	; 0x3f6 <__addsf3+0x28>
 3e8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <__addsf3+0x24>
 3ec:	26 f4       	brtc	.+8      	; 0x3f6 <__addsf3+0x28>
 3ee:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_nan>
 3f2:	0e f4       	brtc	.+2      	; 0x3f6 <__addsf3+0x28>
 3f4:	e0 95       	com	r30
 3f6:	e7 fb       	bst	r30, 7
 3f8:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>

000003fc <__addsf3x>:
 3fc:	e9 2f       	mov	r30, r25
 3fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_split3>
 402:	58 f3       	brcs	.-42     	; 0x3da <__addsf3+0xc>
 404:	ba 17       	cp	r27, r26
 406:	62 07       	cpc	r22, r18
 408:	73 07       	cpc	r23, r19
 40a:	84 07       	cpc	r24, r20
 40c:	95 07       	cpc	r25, r21
 40e:	20 f0       	brcs	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	79 f4       	brne	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 412:	a6 f5       	brtc	.+104    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 414:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_zero>
 418:	0e f4       	brtc	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	e0 95       	com	r30
 41c:	0b 2e       	mov	r0, r27
 41e:	ba 2f       	mov	r27, r26
 420:	a0 2d       	mov	r26, r0
 422:	0b 01       	movw	r0, r22
 424:	b9 01       	movw	r22, r18
 426:	90 01       	movw	r18, r0
 428:	0c 01       	movw	r0, r24
 42a:	ca 01       	movw	r24, r20
 42c:	a0 01       	movw	r20, r0
 42e:	11 24       	eor	r1, r1
 430:	ff 27       	eor	r31, r31
 432:	59 1b       	sub	r21, r25
 434:	99 f0       	breq	.+38     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 436:	59 3f       	cpi	r21, 0xF9	; 249
 438:	50 f4       	brcc	.+20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43a:	50 3e       	cpi	r21, 0xE0	; 224
 43c:	68 f1       	brcs	.+90     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 43e:	1a 16       	cp	r1, r26
 440:	f0 40       	sbci	r31, 0x00	; 0
 442:	a2 2f       	mov	r26, r18
 444:	23 2f       	mov	r18, r19
 446:	34 2f       	mov	r19, r20
 448:	44 27       	eor	r20, r20
 44a:	58 5f       	subi	r21, 0xF8	; 248
 44c:	f3 cf       	rjmp	.-26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 44e:	46 95       	lsr	r20
 450:	37 95       	ror	r19
 452:	27 95       	ror	r18
 454:	a7 95       	ror	r26
 456:	f0 40       	sbci	r31, 0x00	; 0
 458:	53 95       	inc	r21
 45a:	c9 f7       	brne	.-14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 45c:	7e f4       	brtc	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 45e:	1f 16       	cp	r1, r31
 460:	ba 0b       	sbc	r27, r26
 462:	62 0b       	sbc	r22, r18
 464:	73 0b       	sbc	r23, r19
 466:	84 0b       	sbc	r24, r20
 468:	ba f0       	brmi	.+46     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 46a:	91 50       	subi	r25, 0x01	; 1
 46c:	a1 f0       	breq	.+40     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 46e:	ff 0f       	add	r31, r31
 470:	bb 1f       	adc	r27, r27
 472:	66 1f       	adc	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	c2 f7       	brpl	.-16     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 47a:	0e c0       	rjmp	.+28     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 47c:	ba 0f       	add	r27, r26
 47e:	62 1f       	adc	r22, r18
 480:	73 1f       	adc	r23, r19
 482:	84 1f       	adc	r24, r20
 484:	48 f4       	brcc	.+18     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 486:	87 95       	ror	r24
 488:	77 95       	ror	r23
 48a:	67 95       	ror	r22
 48c:	b7 95       	ror	r27
 48e:	f7 95       	ror	r31
 490:	9e 3f       	cpi	r25, 0xFE	; 254
 492:	08 f0       	brcs	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	b0 cf       	rjmp	.-160    	; 0x3f6 <__addsf3+0x28>
 496:	93 95       	inc	r25
 498:	88 0f       	add	r24, r24
 49a:	08 f0       	brcs	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	99 27       	eor	r25, r25
 49e:	ee 0f       	add	r30, r30
 4a0:	97 95       	ror	r25
 4a2:	87 95       	ror	r24
 4a4:	08 95       	ret

000004a6 <__cmpsf2>:
 4a6:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_cmp>
 4aa:	08 f4       	brcc	.+2      	; 0x4ae <__cmpsf2+0x8>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret

000004b0 <__fixunssfsi>:
 4b0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fp_splitA>
 4b4:	88 f0       	brcs	.+34     	; 0x4d8 <__fixunssfsi+0x28>
 4b6:	9f 57       	subi	r25, 0x7F	; 127
 4b8:	98 f0       	brcs	.+38     	; 0x4e0 <__fixunssfsi+0x30>
 4ba:	b9 2f       	mov	r27, r25
 4bc:	99 27       	eor	r25, r25
 4be:	b7 51       	subi	r27, 0x17	; 23
 4c0:	b0 f0       	brcs	.+44     	; 0x4ee <__fixunssfsi+0x3e>
 4c2:	e1 f0       	breq	.+56     	; 0x4fc <__fixunssfsi+0x4c>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	1a f0       	brmi	.+6      	; 0x4d4 <__fixunssfsi+0x24>
 4ce:	ba 95       	dec	r27
 4d0:	c9 f7       	brne	.-14     	; 0x4c4 <__fixunssfsi+0x14>
 4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__fixunssfsi+0x4c>
 4d4:	b1 30       	cpi	r27, 0x01	; 1
 4d6:	91 f0       	breq	.+36     	; 0x4fc <__fixunssfsi+0x4c>
 4d8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_zero>
 4dc:	b1 e0       	ldi	r27, 0x01	; 1
 4de:	08 95       	ret
 4e0:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_zero>
 4e4:	67 2f       	mov	r22, r23
 4e6:	78 2f       	mov	r23, r24
 4e8:	88 27       	eor	r24, r24
 4ea:	b8 5f       	subi	r27, 0xF8	; 248
 4ec:	39 f0       	breq	.+14     	; 0x4fc <__fixunssfsi+0x4c>
 4ee:	b9 3f       	cpi	r27, 0xF9	; 249
 4f0:	cc f3       	brlt	.-14     	; 0x4e4 <__fixunssfsi+0x34>
 4f2:	86 95       	lsr	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b3 95       	inc	r27
 4fa:	d9 f7       	brne	.-10     	; 0x4f2 <__fixunssfsi+0x42>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__stack+0xd>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <__fp_cmp>:
 50e:	99 0f       	add	r25, r25
 510:	00 08       	sbc	r0, r0
 512:	55 0f       	add	r21, r21
 514:	aa 0b       	sbc	r26, r26
 516:	e0 e8       	ldi	r30, 0x80	; 128
 518:	fe ef       	ldi	r31, 0xFE	; 254
 51a:	16 16       	cp	r1, r22
 51c:	17 06       	cpc	r1, r23
 51e:	e8 07       	cpc	r30, r24
 520:	f9 07       	cpc	r31, r25
 522:	c0 f0       	brcs	.+48     	; 0x554 <__fp_cmp+0x46>
 524:	12 16       	cp	r1, r18
 526:	13 06       	cpc	r1, r19
 528:	e4 07       	cpc	r30, r20
 52a:	f5 07       	cpc	r31, r21
 52c:	98 f0       	brcs	.+38     	; 0x554 <__fp_cmp+0x46>
 52e:	62 1b       	sub	r22, r18
 530:	73 0b       	sbc	r23, r19
 532:	84 0b       	sbc	r24, r20
 534:	95 0b       	sbc	r25, r21
 536:	39 f4       	brne	.+14     	; 0x546 <__fp_cmp+0x38>
 538:	0a 26       	eor	r0, r26
 53a:	61 f0       	breq	.+24     	; 0x554 <__fp_cmp+0x46>
 53c:	23 2b       	or	r18, r19
 53e:	24 2b       	or	r18, r20
 540:	25 2b       	or	r18, r21
 542:	21 f4       	brne	.+8      	; 0x54c <__fp_cmp+0x3e>
 544:	08 95       	ret
 546:	0a 26       	eor	r0, r26
 548:	09 f4       	brne	.+2      	; 0x54c <__fp_cmp+0x3e>
 54a:	a1 40       	sbci	r26, 0x01	; 1
 54c:	a6 95       	lsr	r26
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	81 1d       	adc	r24, r1
 552:	81 1d       	adc	r24, r1
 554:	08 95       	ret

00000556 <__fp_inf>:
 556:	97 f9       	bld	r25, 7
 558:	9f 67       	ori	r25, 0x7F	; 127
 55a:	80 e8       	ldi	r24, 0x80	; 128
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	08 95       	ret

00000562 <__fp_nan>:
 562:	9f ef       	ldi	r25, 0xFF	; 255
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	08 95       	ret

00000568 <__fp_pscA>:
 568:	00 24       	eor	r0, r0
 56a:	0a 94       	dec	r0
 56c:	16 16       	cp	r1, r22
 56e:	17 06       	cpc	r1, r23
 570:	18 06       	cpc	r1, r24
 572:	09 06       	cpc	r0, r25
 574:	08 95       	ret

00000576 <__fp_pscB>:
 576:	00 24       	eor	r0, r0
 578:	0a 94       	dec	r0
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	14 06       	cpc	r1, r20
 580:	05 06       	cpc	r0, r21
 582:	08 95       	ret

00000584 <__fp_round>:
 584:	09 2e       	mov	r0, r25
 586:	03 94       	inc	r0
 588:	00 0c       	add	r0, r0
 58a:	11 f4       	brne	.+4      	; 0x590 <__fp_round+0xc>
 58c:	88 23       	and	r24, r24
 58e:	52 f0       	brmi	.+20     	; 0x5a4 <__fp_round+0x20>
 590:	bb 0f       	add	r27, r27
 592:	40 f4       	brcc	.+16     	; 0x5a4 <__fp_round+0x20>
 594:	bf 2b       	or	r27, r31
 596:	11 f4       	brne	.+4      	; 0x59c <__fp_round+0x18>
 598:	60 ff       	sbrs	r22, 0
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <__fp_round+0x20>
 59c:	6f 5f       	subi	r22, 0xFF	; 255
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	08 95       	ret

000005a6 <__fp_split3>:
 5a6:	57 fd       	sbrc	r21, 7
 5a8:	90 58       	subi	r25, 0x80	; 128
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	59 f0       	breq	.+22     	; 0x5c6 <__fp_splitA+0x10>
 5b0:	5f 3f       	cpi	r21, 0xFF	; 255
 5b2:	71 f0       	breq	.+28     	; 0x5d0 <__fp_splitA+0x1a>
 5b4:	47 95       	ror	r20

000005b6 <__fp_splitA>:
 5b6:	88 0f       	add	r24, r24
 5b8:	97 fb       	bst	r25, 7
 5ba:	99 1f       	adc	r25, r25
 5bc:	61 f0       	breq	.+24     	; 0x5d6 <__fp_splitA+0x20>
 5be:	9f 3f       	cpi	r25, 0xFF	; 255
 5c0:	79 f0       	breq	.+30     	; 0x5e0 <__fp_splitA+0x2a>
 5c2:	87 95       	ror	r24
 5c4:	08 95       	ret
 5c6:	12 16       	cp	r1, r18
 5c8:	13 06       	cpc	r1, r19
 5ca:	14 06       	cpc	r1, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	f2 cf       	rjmp	.-28     	; 0x5b4 <__fp_split3+0xe>
 5d0:	46 95       	lsr	r20
 5d2:	f1 df       	rcall	.-30     	; 0x5b6 <__fp_splitA>
 5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <__fp_splitA+0x30>
 5d6:	16 16       	cp	r1, r22
 5d8:	17 06       	cpc	r1, r23
 5da:	18 06       	cpc	r1, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	f1 cf       	rjmp	.-30     	; 0x5c2 <__fp_splitA+0xc>
 5e0:	86 95       	lsr	r24
 5e2:	71 05       	cpc	r23, r1
 5e4:	61 05       	cpc	r22, r1
 5e6:	08 94       	sec
 5e8:	08 95       	ret

000005ea <__fp_zero>:
 5ea:	e8 94       	clt

000005ec <__fp_szero>:
 5ec:	bb 27       	eor	r27, r27
 5ee:	66 27       	eor	r22, r22
 5f0:	77 27       	eor	r23, r23
 5f2:	cb 01       	movw	r24, r22
 5f4:	97 f9       	bld	r25, 7
 5f6:	08 95       	ret

000005f8 <__gesf2>:
 5f8:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_cmp>
 5fc:	08 f4       	brcc	.+2      	; 0x600 <__gesf2+0x8>
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	08 95       	ret

00000602 <__mulsf3>:
 602:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3x>
 606:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_round>
 60a:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscA>
 60e:	38 f0       	brcs	.+14     	; 0x61e <__mulsf3+0x1c>
 610:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscB>
 614:	20 f0       	brcs	.+8      	; 0x61e <__mulsf3+0x1c>
 616:	95 23       	and	r25, r21
 618:	11 f0       	breq	.+4      	; 0x61e <__mulsf3+0x1c>
 61a:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
 61e:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_nan>
 622:	11 24       	eor	r1, r1
 624:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_szero>

00000628 <__mulsf3x>:
 628:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_split3>
 62c:	70 f3       	brcs	.-36     	; 0x60a <__mulsf3+0x8>

0000062e <__mulsf3_pse>:
 62e:	95 9f       	mul	r25, r21
 630:	c1 f3       	breq	.-16     	; 0x622 <__mulsf3+0x20>
 632:	95 0f       	add	r25, r21
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	55 1f       	adc	r21, r21
 638:	62 9f       	mul	r22, r18
 63a:	f0 01       	movw	r30, r0
 63c:	72 9f       	mul	r23, r18
 63e:	bb 27       	eor	r27, r27
 640:	f0 0d       	add	r31, r0
 642:	b1 1d       	adc	r27, r1
 644:	63 9f       	mul	r22, r19
 646:	aa 27       	eor	r26, r26
 648:	f0 0d       	add	r31, r0
 64a:	b1 1d       	adc	r27, r1
 64c:	aa 1f       	adc	r26, r26
 64e:	64 9f       	mul	r22, r20
 650:	66 27       	eor	r22, r22
 652:	b0 0d       	add	r27, r0
 654:	a1 1d       	adc	r26, r1
 656:	66 1f       	adc	r22, r22
 658:	82 9f       	mul	r24, r18
 65a:	22 27       	eor	r18, r18
 65c:	b0 0d       	add	r27, r0
 65e:	a1 1d       	adc	r26, r1
 660:	62 1f       	adc	r22, r18
 662:	73 9f       	mul	r23, r19
 664:	b0 0d       	add	r27, r0
 666:	a1 1d       	adc	r26, r1
 668:	62 1f       	adc	r22, r18
 66a:	83 9f       	mul	r24, r19
 66c:	a0 0d       	add	r26, r0
 66e:	61 1d       	adc	r22, r1
 670:	22 1f       	adc	r18, r18
 672:	74 9f       	mul	r23, r20
 674:	33 27       	eor	r19, r19
 676:	a0 0d       	add	r26, r0
 678:	61 1d       	adc	r22, r1
 67a:	23 1f       	adc	r18, r19
 67c:	84 9f       	mul	r24, r20
 67e:	60 0d       	add	r22, r0
 680:	21 1d       	adc	r18, r1
 682:	82 2f       	mov	r24, r18
 684:	76 2f       	mov	r23, r22
 686:	6a 2f       	mov	r22, r26
 688:	11 24       	eor	r1, r1
 68a:	9f 57       	subi	r25, 0x7F	; 127
 68c:	50 40       	sbci	r21, 0x00	; 0
 68e:	9a f0       	brmi	.+38     	; 0x6b6 <__mulsf3_pse+0x88>
 690:	f1 f0       	breq	.+60     	; 0x6ce <__mulsf3_pse+0xa0>
 692:	88 23       	and	r24, r24
 694:	4a f0       	brmi	.+18     	; 0x6a8 <__mulsf3_pse+0x7a>
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	bb 1f       	adc	r27, r27
 69c:	66 1f       	adc	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	a9 f7       	brne	.-22     	; 0x692 <__mulsf3_pse+0x64>
 6a8:	9e 3f       	cpi	r25, 0xFE	; 254
 6aa:	51 05       	cpc	r21, r1
 6ac:	80 f0       	brcs	.+32     	; 0x6ce <__mulsf3_pse+0xa0>
 6ae:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
 6b2:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_szero>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	e4 f3       	brlt	.-8      	; 0x6b2 <__mulsf3_pse+0x84>
 6ba:	98 3e       	cpi	r25, 0xE8	; 232
 6bc:	d4 f3       	brlt	.-12     	; 0x6b2 <__mulsf3_pse+0x84>
 6be:	86 95       	lsr	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b7 95       	ror	r27
 6c6:	f7 95       	ror	r31
 6c8:	e7 95       	ror	r30
 6ca:	9f 5f       	subi	r25, 0xFF	; 255
 6cc:	c1 f7       	brne	.-16     	; 0x6be <__mulsf3_pse+0x90>
 6ce:	fe 2b       	or	r31, r30
 6d0:	88 0f       	add	r24, r24
 6d2:	91 1d       	adc	r25, r1
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
